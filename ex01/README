###  CPP05

## try catch
C++において、try-catch文は例外処理のための構文です。try-catch文を使用することで、プログラムの実行中に予期しないエラーが発生した場合に、プログラムの異常終了を防止することができます。

##　例外クラス
class MyException : public std::exception {
        const char* what() const _NOEXCEPT;
    };

MyExceptionという名前の例外クラスを定義する
この例外クラスは、std::exceptionクラスを継承している必要がある。
この例外クラスには、what()メソッドが定義されている
what()メソッドは、例外の説明を返すために使用されるメソッドです。このメソッドは、std::exceptionクラスで純粋仮想関数として定義されているため、MyExceptionクラスでも同様に実装する必要があります。

_NOEXCEPTは、C++11で追加されたキーワードで、例外が投げられないことを示すことができます。これは、what()メソッドが例外を投げないことを示しています。しかし、実際には何らかのエラーが発生した場合には、このメソッドから例外を投げることがあります。

このようにして、自作例外クラスに必要なメソッドを定義することができます。実際に例外を投げたり、キャッチしたりする場合には、例外クラスに応じた処理を行う必要があります。

_NOEXCEPTは必須ではありませんが、関数が例外を投げないことを示すために使用されます。特に、what()メソッドは、例外の説明文を返すことが期待されており、例外を投げるということは起こってはならないため、_NOEXCEPTを指定することが推奨されています。また、_NOEXCEPTを指定することで、コンパイラが最適化を行うための情報を提供することができます。ただし、C++11以前のコンパイラを使用している場合は、_NOEXCEPTを使用することができない場合があります。その場合は、代わりにthrow()を使用することができます。例えば、以下のように書くことができます。

Copy code
class MyException : public std::exception {
    const char* what() const throw();
};
C++11以降のコンパイラでは、_NOEXCEPTを使用することが推奨されています。しかし、コンパイラによっては、_NOEXCEPTがサポートされていない場合もあるため、throw()を使用することも有効な選択肢です。

## whatメソッドの戻り値が何故 const char *なのか

what()メソッドは、例外が発生したときにその例外の説明を返すために使われる、std::exceptionクラスに定義されている仮想関数です。戻り値の型がconst char*である理由は、例外の説明を文字列として返すためです。

戻り値がconst char*であることによって、呼び出し側は戻り値を変更できないように制限されます。これは、例外の説明が例外オブジェクトに固定されていることを示しています。つまり、例外が投げられたときに生成された例外オブジェクトには、その例外に関する情報が含まれており、その情報が変更されることはありません。

また、戻り値がconst char*であることによって、例外の説明を返すためのメモリ管理が簡単になります。例外が投げられたときに生成された例外オブジェクトは、例外がキャッチされるときに破棄されます。そのため、例外の説明を保持するためには、静的な文字列バッファや動的に割り当てたメモリを使用する必要があります。戻り値がconst char*であることによって、例外の説明を保持するためのメモリ管理を容易にすることができます。

## 例外オブジェクトとは？

例外オブジェクトとは、プログラムが実行中に発生したエラーを表現するために使用されるオブジェクトです。例外オブジェクトは、通常、例外を投げることによって生成されます。例外は、例外ハンドラによってキャッチされ、適切な処理が行われるようになっています。

例外オブジェクトは、プログラムの実行中に発生したエラーに関する情報を含んでいます。例えば、ファイルが見つからない、メモリが不足している、ゼロ除算が発生した、などのエラーが発生すると、それらのエラーに関する情報が例外オブジェクトに格納されます。例外オブジェクトには、エラーに関する情報だけでなく、エラーが発生した場所に関する情報も含まれることがあります。

例外オブジェクトは、通常、例外を投げる関数やメソッド内で生成されます。例外が投げられたときに、その例外オブジェクトは例外処理のために例外ハンドラに渡されます。例外ハンドラは、例外オブジェクトからエラーに関する情報を取得し、適切な処理を行うことができます。例外ハンドラが処理を完了すると、例外オブジェクトは破棄されます。